Git is a version control system.
Git is free software.
Git is free software distributed under the GPL.
Git tracks changes of files.

test lines

中文

git init
git add filename
git commit -m "comments"

git status
git diff

git reset --hard HEAD^
git reset --hard commit_id
git log 可以查看提交历史，以便确定要回退到哪个版本。
git reflog 查看命令历史,以便确定回退到哪个版本

暂存区stage
分支master

git diff HEAD -- test.txt 查看工作区和版本库里面最新版本的区别

git checkout -- test.txt 回到最近一次git commit或git add时的状态
git reset HEAD test.txt 既可以回退版本，也可以把暂存区的修改回退到工作区

rm test.txt
git rm
git commit

ssh-keygen -t rsa -C "email"

test

git remote add origin https://github.com/username/learngit.git
git remote add origin git@github.com/username/learngit.git
git push -u origin master
git push origin master

git remote rm origin

git clone git@github.com/username/learngit.git

git checkout -b dev 创建dev分支，然后切换到dev分支
相当于
git branch dev 创建分支
git checkout dev 切换分支

git branch 查看分支
git merge <name> 合并某分支到当前分支
git branch -d <name> 删除分支

git log --graph --pretty=oneline --abbrev-commit

git stash 存储工作区
git stash list 查看stash内容
git stash pop 恢复stash

git merge --no-ff -m "merge with no-ff" dev 禁用fast forward

修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。

git branch -D <name> 强制删除分支

git remote 查看远程库的信息
git remote -v 详细信息

git push origin master 推送不同的分支
git push origin dev 推送不同的分支

从远程库clone时，默认情况下，只能看到本地的master分支
git checkout -b dev origin/dev 创建本地dev分支

git pull 从远程抓取分支
git branch --set-upstream-to=origin/dev 创建本地分支与远程分支的链接

多人协作的工作模式通常是这样：
首先，可以试图用git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。

在本地打标签:
git tag v1.2 打标签
git tag v0.9 <commit id> 给指定commit打标签
git tag -a v0.9 -m "..." 添加说明
git tag -s v0.9 -m "..." PGP签名标签
git show v1.0 查看指定版本的说明
git tag 查看所有标签

删除本地标签:
git tag -d v1.0

推送标签:
git push origin <tagname> 推送标签
git push origin --tags 推送所有标签

删除远程标签:
git tag -d v0.9 先删除本地
git push origin :refs/tags/v0.9 删除远程

